#defining the biome
wasteland = forBiomes(40)

#"name" - This will set the name of biome, usually displayed in the f3 debug display. The second argument must be a String.
wasteland.set("name","Wasteland")

#"height" - This determines the base height for the biomes land generation. This is multiplied by 32 and added to 64. However, this is fairly loose. The actual height experienced may vary. It takes a float argument, can be negative. The second argument is a float.
wasteland.set("height",1.5)
#"heightVariation" - This determines how far the land generation will stray from the root height on average. Seems to be multiplied by 32 when generating, but more extreme values have been experienced. The second argument is a float.
wasteland.set("heightVariation",0.5)

#"topBlock" - Used to set the block that appears on top of a biome. By default, this is usually dirt, or "minecraft:grass". The argument is a block.
wasteland.set("topBlock","biomesoplenty:dried_sand")

#"fillerBlock" - Like topBlock, but used to set the filler block for a biome. Usually "minecraft:dirt". Note that this does not determine what block will appear below the surface. It only effects about 3-4 layers below the surface. Use registerGenBlockRep for the rest of the way to bedrock.
wasteland.set("fillerBlock","biomesoplenty:dried_sand")

#"oceanTopBlock" - Used to set the block that appears on the ocean floor. By default, this is usually gravel, or "minecraft:gravel". The argument a block. Disabled by default. Requires BiomeTweakerCore.
wasteland.set("oceanTopBlock","biomesoplenty:dried_sand")

#"oceanFillerBlock" - Like oceanTopBlock, but used to set the filler block, directly under the top block. Usually "minecraft:stone". Note that this does not determine what block will appear below the surface. It only effects about 3-4 layers below the surface. Use registerGenBlockRep for the rest of the way to bedrock. Disabled by default. Requires BiomeTweakerCore.
#wasteland.set("oceanFillerBlock","")

#"liquidFillerBlock" - Changed in v1.0. Similar to actualFillerBlock before v1.0, but used for liquids (mainly in the oceans). Default is "minecraft:water".
#wasteland.set("liquidFillerBlock","")

#"temperature" - Sets the temperature for the biome. This is used in determining whether it snows or rains, and factors into the foliage color. Second argument is a float. Values around 0 (-0.2 to 0.2) will cause snow if snow is enabled. Hot biomes are around 1.
wasteland.set("temperature",2.2)

#"humidity" - I'm not entirely certain what this does, haven't tested enough, although it seems to factor into a biome's foliage color along with temperature. Second argument is float.
wasteland.set("humidity",0.0)

#"grassColor" - Sets the color of grass and tall grass. It takes an integer value that represents a standard RGB hex value. Disabled by default. Requires BiomeTweakerCore.
wasteland.set("grassColor",11569736)

#"foliageColor" - Sets the color of trees and vines. It takes an integer value that represents a standard RGB hex value. Disabled by default. Requires BiomeTweakerCore.
#wasteland.set("foliageColor","")

#"waterColor" - Added to the water color as a "tint". It takes an integer value that represents a standard RGB hex value. May not work in some biomes. Requires BiomeTweakerCore to work in all biomes.
wasteland.set("waterColor",7683584)

#"enableRain" - Determines if it rains in a biome. Second argument is a boolean (true or false, no quotes).
wasteland.set("enableRain",false)

#"enableSnow" - Like enableRain, but determines if it snows instead of rains if the temperature if cold enough. Only meaningful if enableRain is true.
#wasteland.set("enableSnow","")

#"xxxPerChunk" - This is used to set the generation density of features. The "xxx" means that there are multiple value that can be used. You can find the valid values (without underscores) here. The second argument must be a non-negative integer. Default for trees is usually around 10, others are usually 1-4. Most features generate in "patches", trees only generate one at a time. That is, setting flowers to 3 will generate 3 "patches" of flowers, while setting trees to 3 will generate 3 trees. You must set the application stage to "INIT" or earlier for this to have any effect.
#wasteland.set("xxxPerChunk","")

#"genWeight" - Used to change the generation weight of biomes. The second argument must be a non-negative integer. Standard value for vanilla biomes is 10. Some thing like 1000 will cause the world to be almost entirely that biome.
wasteland.set("genWeight",9000)

#"genVillages" - Used to set if villages can appear in biomes. The second parameter must be a boolean (true/false)
wasteland.set("genVillages",false)

#"genStrongholds" - Used to set of strongholds can appear in biomes. The second parameter must be a boolean (true/false)
wasteland.set("genStrongholds",false)

#"isSpawnBiome" - Used to set if biomes can be a valid spawn point for players. Second argument must be a boolean.
wasteland.set("isSpawnBiome",true)

#"genTallPlants" - If set to false, plants such as sunflowers and double tall grass won't generate. This is a global tweak, affecting all biomes.
wasteland.set("genTallPlants",false)

#"skyColor" - Sets the color of the sky (not the horizon, see fogColor for that). Takes an integer representation of an RGB hex value. Disabled by default. Requires BiomeTweakerCore.
#wasteland.set("skyColor","")

#"genScatteredFeatures" - Sets if scattered features should generate. Scattered features are biome-specific structures such as swamp huts, jungle temples, and desert temples. Set to false to disable generation.
wasteland.set("genScatteredFeatures",false)

#"fogColor" - Sets the fog (or horizon) color. Takes an integer representation of an RGB hex value. Disabled by default. Requires BiomeTweakerCore.
wasteland.set("fogColor",9749)

#"genInitialSnow" - Sets if the initial snow generator should run. Even if snow is disabled, snow will initially be placed in very cold biomes. Set to false to disable that.
wasteland.set("genInitialSnow",false)
